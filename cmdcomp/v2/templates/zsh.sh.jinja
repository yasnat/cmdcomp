{%- set func_name = "_" + app_name|ident -%}
{%- set scope = "" -%}

{#- macro def -#}
{%- macro candidate(target_name, target) -%}
  {% if target.aliases|length == 0 -%}
    {{ target_name }}
  {%- else -%}
    {{ "{" + ([target_name] + target.aliases)|join(",") + "}" }}
  {%- endif -%}
{%- endmacro -%}

{#- macro def -#}
{%- macro description(argument) -%}
  {%- if argument.description is not none -%}[{{ argument.description }}]{%- endif -%}
{%- endmacro -%}

{#- macro def -#}
{%- macro contents(arg_name, argument) -%}
  {%- if argument.type == 'select' -%}
          :values:{{ "(" + argument.options|join(" ") + ")" }}
  {%- elif argument.type == 'file' -%}
          :file:_files{%- if argument.base_path is not none %} -W "{{ argument.base_path }}"{%- endif -%}
  {%- elif argument.type == 'command' -%}
          :command:_values '{{ arg_name|ident }}' '"$_{{ arg_name|ident }}_execute_result"'
  {%- elif argument.type == 'flag' -%}
  {%- endif -%}
{%- endmacro -%}

#compdef {{ app_name }}
#
# Code generated by cmdcomp "{{ version }}". DO NOT EDIT.
# For more information about cmdcomp, please refer to https://github.com/yassun7010/cmdcomp .
#

{{ func_name }}() {
  local context curcontext=$curcontext state line
  declare -A opt_args
  local ret=1
  local cmd_name={{ app_name }}

  case $cmd_name in
{%- for cmd_name, command in commands.items() recursive %}
{%- if command.type == "delegate" %}
    {{ ([cmd_name] + command.aliases)|join("|") }})
      words=({{ command.targets | join(" ") }} "${words[{{ loop.depth }}, -1]}")
      ((CURRENT += {{ command.targets | length - 1 }}))
      _normal
      ;;
{%- else -%}
{%- set scope = scope + "_" + cmd_name %}
    {{ ([cmd_name] + command.aliases)|join("|") }})
{%- if command.has_subcommands %}
      local -a _{{ scope|ident }}_subcmds
      _{{ scope|ident }}_subcmds=(
{%- for subcmd_name, subcommand in command.subcommands.items() %}
        {{ candidate(subcmd_name, subcommand) }}'{{ description(subcommand)|escape }}'
{%- endfor %}
      )
{% endif %}
{%- for arg_name, argument in command.arguments.items() -%}
{%- if argument.type == "command" %}
      local _{{ arg_name|ident }}_execute_result=$({{ argument.execute }})
{%- endif %}
{%- endfor %}
      _arguments -C \
{%- for kwd_name, keyword in command.keyword_arguments.items() %}
        {{ candidate(kwd_name, keyword) }}'{{ description(keyword)|escape }}{{ contents(kwd_name, keyword) }}' \
{%- endfor %}
{%- for pos_name, positional in command.positional_arguments.items() %}
        '{{ pos_name }}{{ contents(pos_name, positional) }}' \
{%- endfor %}
{%- if command.has_positional_wildcard_argument %}
        '*{{ contents("*", command.positional_wildcard_argument) }}' \
{%- elif command.has_subcommands %}
        '1: :_values "subcommand" ${_{{ scope|ident }}_subcmds[@]}' \
        '*:: :->args' \
{%- endif %}
        && ret=0
{%- if command.has_subcommands %}

      cmd_name=$words[1]
      case $state in
        args)
          case $cmd_name in
{{- loop(command.subcommands.items())|indent(width=8) }}
          esac
          ;;

      esac
{%- endif %}
      ;;
{%- endif %}
{% endfor %}
  esac

  return ret
}

compdef {{ func_name }} {{ ([app_name] + app_aliases)|join(" ") }}

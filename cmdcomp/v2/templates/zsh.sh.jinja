{%- set func_name = "_" + app_name|replace("-","_") -%}
{%- set scope = "" -%}

{%- macro candidate(target_name, target) -%}
  {% if target.aliases|length == 0 -%}
    {{ target_name }}
  {%- else -%}
    {{ "{" + ([target_name] + target.aliases)|join(",") + "}" }}
  {%- endif -%}
{%- endmacro -%}

{%- macro description(argument) -%}
  {%- if argument.description is not none -%}[{{ argument.description }}]{%- endif -%}
{%- endmacro -%}

{%- macro contents(arg_name, argument) -%}
  {%- if argument.type == 'values' -%}
          :values:{{ "(" + argument.values|map("string")|join(" ") + ")" }}
  {%- elif argument.type == 'file' -%}
          :file:_files{%- if argument.base_path is not none %} -W "{{ argument.base_path }}"{%- endif -%}
  {%- elif argument.type == 'command' -%}
          :command:_values '{{ arg_name|trim("-") }}' $({{ argument.execute }})
  {%- elif argument.type == 'flag' -%}
  {%- endif -%}
{%- endmacro -%}

#!/bin/zsh

{{ func_name }}() {
  local context curcontext=$curcontext state line
  declare -A opt_args
  local ret=1
  local cmd_name={{ app_name }}

  case $cmd_name in
{%- for cmd_name, command in commands.items() recursive %}
{%- set scope = scope + "_" + cmd_name %}
    {{ ([cmd_name] + command.aliases)|join("|") }})
{%- if command.subcommands|length != 0 %}
      local -a _{{ scope }}_subcmds
      _{{ scope }}_subcmds=(
{%- for subcmd_name, subcommand in command.subcommands.items() %}
        {{ candidate(subcmd_name, subcommand) }}'{% if subcommand.description is not none%}[{{ subcommand.description }}]{% endif %}'
{%- endfor %}
      )
{%- endif %}

      _arguments -C \
{%- for kwd_name, keyword in command.keyword_arguments.items() %}
        {{ candidate(kwd_name, keyword) }}'{{ description(keyword) }}{{ contents(kwd_name, keyword) }}' \
{%- endfor %}
{%- for pos_name, positional in command.positional_arguments.items() %}
        {{ pos_name }}'{{ contents(pos_name, positional) }}' \
{%- endfor %}
{%- if command.positional_wildcard_argument is not none %}
        '*: {{ contents("*", command.positional_wildcard_argument) }}' \
{%- elif command.subcommands|length != 0 %}
        1': :_values "subcommand" ${_{{ scope }}_subcmds[@]}' \
        '*:: :->args' \
{%- endif %}
        && ret=0
{% if command.subcommands|length != 0 %}
      cmd_name=$words[1]
      case $state in
        args)
          case $cmd_name in
{{- loop(command.subcommands.items())|indent(width=8) }}
          esac
          ;;
      esac
{%- endif %}
      ;;
{%- endfor %}
  esac

  return ret
}

compdef {{ func_name }} {{ ([app_name] + app_aliases)|join(" ") }}

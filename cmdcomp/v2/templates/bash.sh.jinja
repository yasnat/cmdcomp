{%- set func_name = "_" + app_name|replace("-","_") -%}
{%- set scope = "" -%}

{%- macro argument_completion(argument) -%}
  {%- if argument.type == "values" %}
  COMPREPLY=( $(compgen -W "{{ argument.values|join(" ") }}" -- "$cur") )
  {% elif argument.type == "file" %}
  file_completion "{{ argument.base_path or "." }}"
  {% elif argument.type == "command" %}
  COMPREPLY=( $(compgen -W "{{ argument.execute }}" -- "$cur") )
  {% elif argument.type == "flag" %}
  COMPREPLY=()
  {% endif -%}
{%- endmacro -%}

{%- macro command_completion(command, depth) -%}
  {% if command.subcommands|length != 0 -%}
  {#- when subcommand -#}
  opts="{{ (command.subcommands|list + command.keyword_arguments|list)|join(' ') }}"
  if [[ ${COMP_CWORD} -eq {{ depth }} ]] ; then
    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
    return 0
  fi
  {%- elif command.positional_arguments|length != 0 -%}
  {#- when some positional arguments -#}
  opts="{{ command.keyword_arguments|list|join(' ') }}"
  if [[ ${cur} == -* && ${COMP_CWORD} -eq {{ depth }} ]] ; then
    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
    return 0
  fi
  {%- else -%}
  {#- when only keyword arguments -#}
  opts="{{ command.keyword_arguments|list|join(' ') }}"
  if [[ ${COMP_CWORD} -eq {{ depth }} ]] ; then
    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
    return 0
  fi
  {%- endif %}

  case "${prev}" in
    {% for keyword, argument in command.keyword_arguments.items() -%}
    {{ keyword }})
      {{- argument_completion(argument)|indent(4) -}}
      ;;

    {% endfor -%}
    {% if 1 in command.arguments -%}
    *)
      {{- argument_completion(command.arguments[1])|indent(4) -}}
      ;;
    {%- elif "*" in command.arguments -%}
    *)
      {{- argument_completion(command.arguments["*"])|indent(4) -}}
      ;;
    {%- else -%}
    *)
      COMPREPLY=()
      ;;
    {%- endif %}

  esac
{%- endmacro -%}

#!/bin/bash

{{ func_name }}() {
  local word cur prev cmd opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  cmd=""
  opts=""

  for word in ${COMP_WORDS[@]}; do
    case "${cmd},${word}" in
      ",$1")
        cmd="{{ func_name }}"
        ;;
{% for (tag, command_name), subcommand in append_key_tag(commands[app_name].subcommands, func_name).items() recursive %}
      {% set new_tag = tag + "_" + command_name|replace("-","_") -%}
      {{ tag }},{{ command_name }})
        cmd="{{ new_tag }}"
        ;;
{{ loop(append_key_tag(subcommand.subcommands, new_tag).items()) -}}
{% endfor %}
      *)
        ;;
    esac
  done

  case "${cmd}" in
    {{ func_name }})
      {{ command_completion(commands[app_name], 1)|indent(4) }}

      return 0
      ;;
{% for (tag, command_name), subcommand in append_key_tag(commands[app_name].subcommands, func_name).items() recursive %}
    {% set new_tag = tag + "_" + command_name|replace("-","_") -%}
    {{ new_tag }})
      {{ command_completion(subcommand, loop.depth + 1)|indent(4) }}

      return 0
      ;;
{{ loop(append_key_tag(subcommand.subcommands, new_tag).items()) -}}
{% endfor %}
  esac
}

complete -F {{ func_name }} -o bashdefault -o default {{ app_name }}

import re

import pytest

from cmdcomp.app import App
from cmdcomp.shell import ShellType
from tests.conftest import EXAMPLES_DIR


@pytest.mark.parametrize("version", ["v1", "v2"])
@pytest.mark.parametrize("config_format", ["yaml", "toml"])
@pytest.mark.parametrize("shell", ShellType)
class TestApplication:
    def test_application(
        self,
        capsys: pytest.CaptureFixture,
        version: str,
        config_format: str,
        shell: ShellType,
    ) -> None:
        App.run(
            [
                "--file",
                str(EXAMPLES_DIR / version / f"config.cmdcomp.{config_format}"),
                "--shell-type",
                shell.value,
            ]
        )

        assert mask_version(
            capsys.readouterr().out,
        ) == mask_version(
            open(EXAMPLES_DIR / version / f"output.{shell.value}").read(),
        )

    def test_output_file_to_examples(
        self,
        capsys: pytest.CaptureFixture,
        version: str,
        config_format: str,
        shell: ShellType,
    ) -> None:
        App.run(
            [
                "--file",
                str(EXAMPLES_DIR / version / f"config.cmdcomp.{config_format}"),
                "--shell-type",
                shell.value,
            ]
        )

        with open(EXAMPLES_DIR / version / f"output.{shell.value}", "w") as file:
            file.write(mask_version(capsys.readouterr().out))


@pytest.mark.parametrize("shell", ShellType)
class TestDemo:
    def test_demos(
        self,
        capsys: pytest.CaptureFixture,
        shell: ShellType,
    ) -> None:
        App.run(
            [
                "--file",
                str(EXAMPLES_DIR / "demo" / "config.cmdcomp.yaml"),
                "--shell-type",
                shell.value,
            ]
        )

        assert mask_version(
            capsys.readouterr().out,
        ) == mask_version(
            open(EXAMPLES_DIR / "demo" / f"output.{shell.value}").read(),
        )

    def test_output_file_to_examples(
        self,
        capsys: pytest.CaptureFixture,
        shell: ShellType,
    ) -> None:
        App.run(
            [
                "--file",
                str(EXAMPLES_DIR / "demo" / "config.cmdcomp.yaml"),
                "--shell-type",
                shell.value,
            ]
        )

        with open(EXAMPLES_DIR / "demo" / f"output.{shell.value}", "w") as file:
            file.write(mask_version(capsys.readouterr().out))


def mask_version(output: str) -> str:
    return re.sub(
        r'\n# Code generated by cmdcomp ".*"',
        r'\n# Code generated by cmdcomp "$CMDCOMP_VERSION"',
        output,
        count=1,
    )
